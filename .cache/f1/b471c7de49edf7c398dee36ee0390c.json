{"id":"../node_modules/ipv4-peers/index.js","dependencies":[{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/package.json","includedInParent":true,"mtime":1676236562742},{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/ipv4-peers/package.json","includedInParent":true,"mtime":1676236547014},{"name":"buffer","parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/ipv4-peers/index.js","resolved":"/Users/sonamchoeda/.nvm/versions/node/v14.18.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nmodule.exports = create(0)\n\nfunction create (idLength) {\n  if (!idLength) idLength = 0\n\n  var entrySize = idLength + 6\n\n  encode.bytes = decode.bytes = 0\n\n  return {\n    idLength: create,\n    encodingLength: encodingLength,\n    encode: encode,\n    decode: decode\n  }\n\n  function encodingLength (peers) {\n    return peers.length * entrySize\n  }\n\n  function encode (peers, buf, offset) {\n    if (!buf) buf = Buffer.allocUnsafe(encodingLength(peers))\n    if (!offset) offset = 0\n\n    for (var i = 0; i < peers.length; i++) {\n      if (idLength) {\n        peers[i].id.copy(buf, offset)\n        offset += idLength\n      }\n\n      var host = peers[i].host.split('.')\n      var port = peers[i].port\n      buf[offset++] = parseInt(host[0], 10)\n      buf[offset++] = parseInt(host[1], 10)\n      buf[offset++] = parseInt(host[2], 10)\n      buf[offset++] = parseInt(host[3], 10)\n      buf.writeUInt16BE(port, offset)\n      offset += 2\n    }\n\n    encode.bytes = peers.length * entrySize\n    return buf\n  }\n\n  function decode (buf, offset, end) {\n    if (!offset) offset = 0\n    if (!end) end = buf.length\n\n    var peers = new Array(Math.floor((end - offset) / entrySize))\n\n    for (var i = 0; i < peers.length; i++) {\n      var id = null\n      if (idLength) {\n        id = buf.slice(offset, offset + idLength)\n        offset += idLength\n      }\n      var host = buf[offset++] + '.' + buf[offset++] + '.' + buf[offset++] + '.' + buf[offset++]\n      var port = buf.readUInt16BE(offset)\n\n      if (port === 0) throw new RangeError('Port should be > 0 and < 65536')\n\n      peers[i] = id ? {id: id, host: host, port: port} : {host: host, port: port}\n      offset += 2\n    }\n\n    decode.bytes = peers.length * entrySize\n    return peers\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipv4-peers/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipv4-peers/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}}],"sources":{"../node_modules/ipv4-peers/index.js":"module.exports = create(0)\n\nfunction create (idLength) {\n  if (!idLength) idLength = 0\n\n  var entrySize = idLength + 6\n\n  encode.bytes = decode.bytes = 0\n\n  return {\n    idLength: create,\n    encodingLength: encodingLength,\n    encode: encode,\n    decode: decode\n  }\n\n  function encodingLength (peers) {\n    return peers.length * entrySize\n  }\n\n  function encode (peers, buf, offset) {\n    if (!buf) buf = Buffer.allocUnsafe(encodingLength(peers))\n    if (!offset) offset = 0\n\n    for (var i = 0; i < peers.length; i++) {\n      if (idLength) {\n        peers[i].id.copy(buf, offset)\n        offset += idLength\n      }\n\n      var host = peers[i].host.split('.')\n      var port = peers[i].port\n      buf[offset++] = parseInt(host[0], 10)\n      buf[offset++] = parseInt(host[1], 10)\n      buf[offset++] = parseInt(host[2], 10)\n      buf[offset++] = parseInt(host[3], 10)\n      buf.writeUInt16BE(port, offset)\n      offset += 2\n    }\n\n    encode.bytes = peers.length * entrySize\n    return buf\n  }\n\n  function decode (buf, offset, end) {\n    if (!offset) offset = 0\n    if (!end) end = buf.length\n\n    var peers = new Array(Math.floor((end - offset) / entrySize))\n\n    for (var i = 0; i < peers.length; i++) {\n      var id = null\n      if (idLength) {\n        id = buf.slice(offset, offset + idLength)\n        offset += idLength\n      }\n      var host = buf[offset++] + '.' + buf[offset++] + '.' + buf[offset++] + '.' + buf[offset++]\n      var port = buf.readUInt16BE(offset)\n\n      if (port === 0) throw new RangeError('Port should be > 0 and < 65536')\n\n      peers[i] = id ? {id: id, host: host, port: port} : {host: host, port: port}\n      offset += 2\n    }\n\n    decode.bytes = peers.length * entrySize\n    return peers\n  }\n}\n"},"lineCount":71}},"error":null,"hash":"6ff82118056761330bd486f2ad2ab262","cacheData":{"env":{}}}