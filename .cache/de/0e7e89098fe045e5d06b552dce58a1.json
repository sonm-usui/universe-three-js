{"id":"../node_modules/sodium-javascript/crypto_kdf.js","dependencies":[{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/package.json","includedInParent":true,"mtime":1676236562742},{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/sodium-javascript/package.json","includedInParent":true,"mtime":1676236540657},{"name":"nanoassert","loc":{"line":1,"column":21,"index":21},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/sodium-javascript/crypto_kdf.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/nanoassert/index.js"},{"name":"./randombytes","loc":{"line":2,"column":30,"index":65},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/sodium-javascript/crypto_kdf.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/sodium-javascript/randombytes.js"},{"name":"blake2b","loc":{"line":3,"column":22,"index":120},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/sodium-javascript/crypto_kdf.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/blake2b/index.js"}],"generated":{"js":"var assert = require('nanoassert')\nvar randombytes_buf = require('./randombytes').randombytes_buf\nvar blake2b = require('blake2b')\n\nmodule.exports.crypto_kdf_PRIMITIVE = 'blake2b'\nmodule.exports.crypto_kdf_BYTES_MIN = 16\nmodule.exports.crypto_kdf_BYTES_MAX = 64\nmodule.exports.crypto_kdf_CONTEXTBYTES = 8\nmodule.exports.crypto_kdf_KEYBYTES = 32\n\nfunction STORE64_LE(dest, int) {\n  var mul = 1\n  var i = 0\n  dest[0] = int & 0xFF\n  while (++i < 8 && (mul *= 0x100)) {\n    dest[i] = (int / mul) & 0xFF\n  }\n}\n\nmodule.exports.crypto_kdf_derive_from_key = function crypto_kdf_derive_from_key (subkey, subkey_id, ctx, key) {\n  assert(subkey.length >= module.exports.crypto_kdf_BYTES_MIN, 'subkey must be at least crypto_kdf_BYTES_MIN')\n  assert(subkey_id >= 0 && subkey_id <= 0x1fffffffffffff, 'subkey_id must be safe integer')\n  assert(ctx.length >= module.exports.crypto_kdf_CONTEXTBYTES, 'context must be at least crypto_kdf_CONTEXTBYTES')\n\n  var ctx_padded = new Uint8Array(blake2b.PERSONALBYTES)\n  var salt = new Uint8Array(blake2b.SALTBYTES)\n\n  ctx_padded.set(ctx, 0, module.exports.crypto_kdf_CONTEXTBYTES)\n  STORE64_LE(salt, subkey_id)\n\n  var outlen = Math.min(subkey.length, module.exports.crypto_kdf_BYTES_MAX)\n  blake2b(outlen, key.subarray(0, module.exports.crypto_kdf_KEYBYTES), salt, ctx_padded, true)\n    .final(subkey)\n}\n\nmodule.exports.crypto_kdf_keygen = function crypto_kdf_keygen (out) {\n  assert(out.length >= module.exports.crypto_kdf_KEYBYTES, 'out.length must be crypto_kdf_KEYBYTES')\n  randombytes_buf(out.subarray(0, module.exports.crypto_kdf_KEYBYTES))\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/sodium-javascript/crypto_kdf.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}}],"sources":{"../node_modules/sodium-javascript/crypto_kdf.js":"var assert = require('nanoassert')\nvar randombytes_buf = require('./randombytes').randombytes_buf\nvar blake2b = require('blake2b')\n\nmodule.exports.crypto_kdf_PRIMITIVE = 'blake2b'\nmodule.exports.crypto_kdf_BYTES_MIN = 16\nmodule.exports.crypto_kdf_BYTES_MAX = 64\nmodule.exports.crypto_kdf_CONTEXTBYTES = 8\nmodule.exports.crypto_kdf_KEYBYTES = 32\n\nfunction STORE64_LE(dest, int) {\n  var mul = 1\n  var i = 0\n  dest[0] = int & 0xFF\n  while (++i < 8 && (mul *= 0x100)) {\n    dest[i] = (int / mul) & 0xFF\n  }\n}\n\nmodule.exports.crypto_kdf_derive_from_key = function crypto_kdf_derive_from_key (subkey, subkey_id, ctx, key) {\n  assert(subkey.length >= module.exports.crypto_kdf_BYTES_MIN, 'subkey must be at least crypto_kdf_BYTES_MIN')\n  assert(subkey_id >= 0 && subkey_id <= 0x1fffffffffffff, 'subkey_id must be safe integer')\n  assert(ctx.length >= module.exports.crypto_kdf_CONTEXTBYTES, 'context must be at least crypto_kdf_CONTEXTBYTES')\n\n  var ctx_padded = new Uint8Array(blake2b.PERSONALBYTES)\n  var salt = new Uint8Array(blake2b.SALTBYTES)\n\n  ctx_padded.set(ctx, 0, module.exports.crypto_kdf_CONTEXTBYTES)\n  STORE64_LE(salt, subkey_id)\n\n  var outlen = Math.min(subkey.length, module.exports.crypto_kdf_BYTES_MAX)\n  blake2b(outlen, key.subarray(0, module.exports.crypto_kdf_KEYBYTES), salt, ctx_padded, true)\n    .final(subkey)\n}\n\nmodule.exports.crypto_kdf_keygen = function crypto_kdf_keygen (out) {\n  assert(out.length >= module.exports.crypto_kdf_KEYBYTES, 'out.length must be crypto_kdf_KEYBYTES')\n  randombytes_buf(out.subarray(0, module.exports.crypto_kdf_KEYBYTES))\n}\n"},"lineCount":40}},"error":null,"hash":"68a7ea34bd14d77ce173c2851965e453","cacheData":{"env":{}}}