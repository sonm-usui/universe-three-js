{"id":"../node_modules/fast-bitfield/index.js","dependencies":[{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/package.json","includedInParent":true,"mtime":1676236562742},{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/fast-bitfield/package.json","includedInParent":true,"mtime":1676236541851},{"name":"count-trailing-zeros","loc":{"line":3,"column":20,"index":34},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/fast-bitfield/index.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/count-trailing-zeros/ctz.js"}],"generated":{"js":"'use strict'\n\nconst ctz = require('count-trailing-zeros')\n\nmodule.exports = () => new Bitfield()\n\nclass Page {\n  constructor (level) {\n    const buf = new Uint8Array(level ? 8456 : 4360)\n    const b = buf.byteOffset\n\n    this.buffer = buf\n    this.bits = level ? null : new Uint32Array(buf.buffer, b, 1024)\n    this.children = level ? new Array(32768) : null\n    this.level = level\n\n    this.allOne = level\n      ? [\n        new Uint32Array(buf.buffer, b, 1024),\n        new Uint32Array(buf.buffer, b + 4096, 32),\n        new Uint32Array(buf.buffer, b + 4224, 1)\n      ]\n      : [\n        this.bits,\n        new Uint32Array(buf.buffer, b + 4096, 32),\n        new Uint32Array(buf.buffer, b + 4224, 1)\n      ]\n\n    this.oneOne = level\n      ? [\n        new Uint32Array(buf.buffer, b + 4228, 1024),\n        new Uint32Array(buf.buffer, b + 8324, 32),\n        new Uint32Array(buf.buffer, b + 8452, 1)\n      ]\n      : [\n        this.bits,\n        new Uint32Array(buf.buffer, b + 4228, 32),\n        new Uint32Array(buf.buffer, b + 4356, 1)\n      ]\n  }\n}\n\nconst ZEROS = [new Page(0), new Page(1), new Page(2), new Page(3)]\nconst MASK = new Uint32Array(32)\nconst MASK_INCL = new Uint32Array(32)\n\nfor (var i = 0; i < 32; i++) {\n  MASK[i] = Math.pow(2, 31 - i) - 1\n  MASK_INCL[i] = Math.pow(2, 32 - i) - 1\n}\n\nconst LITTLE_ENDIAN = new Uint8Array(MASK.buffer, MASK.byteOffset, 1)[0] === 0xff\n\nclass Bitfield {\n  constructor () {\n    this.length = 32768\n    this.littleEndian = LITTLE_ENDIAN\n\n    this._path = new Uint16Array(5)\n    this._offsets = new Uint16Array(this._path.buffer, this._path.byteOffset + 2, 4)\n    this._parents = new Array(4).fill(null)\n    this._page = new Page(0)\n    this._allocs = 1\n  }\n\n  last () {\n    var page = this._page\n    var b = 0\n\n    while (true) {\n      for (var i = 2; i >= 0; i--) {\n        const c = ctz(page.oneOne[i][b])\n        if (c === 32) return -1\n        b = (b << 5) + (31 - c)\n      }\n\n      this._path[page.level] = b\n      if (!page.level) return defactor(this._path)\n      page = page.children[b]\n      b = 0\n    }\n  }\n\n  set (index, bit) {\n    const page = this._getPage(index, bit)\n    if (!page) return false\n\n    const i = this._path[0]\n    const r = i & 31\n    const b = i >>> 5\n    const prev = page.bits[b]\n\n    page.bits[b] = bit\n      ? (prev | (0x80000000 >>> r))\n      : (prev & ~(0x80000000 >>> r))\n\n    const upd = page.bits[b]\n    if (upd === prev) return false\n\n    this._updateAllOne(page, b, upd)\n    this._updateOneOne(page, b, upd)\n\n    return true\n  }\n\n  get (index) {\n    const page = this._getPage(index, false)\n    if (!page) return false\n\n    const i = this._path[0]\n    const r = i & 31\n\n    return (page.bits[i >>> 5] & (0x80000000 >>> r)) !== 0\n  }\n\n  iterator () {\n    return new Iterator(this)\n  }\n\n  fill (val, start, end) {\n    if (!start) start = 0\n    if (val === true) return this._fillBit(true, start, end === 0 ? end : (end || this.length))\n    if (val === false) return this._fillBit(false, start, end === 0 ? end : (end || this.length))\n    this._fillBuffer(val, start, end === 0 ? end : (end || (start + 8 * val.length)))\n  }\n\n  grow () {\n    if (this._page.level === 3) throw new Error('Cannot grow beyond ' + this.length)\n    const page = this._page\n    this._page = new Page(page.level + 1)\n    this._page.children[0] = page\n    if (this._page.level === 3) this.length = Number.MAX_SAFE_INTEGER\n    else this.length *= 32768\n  }\n\n  _fillBuffer (buf, start, end) {\n    if ((start & 7) || (end & 7)) throw new Error('Offsets must be a multiple of 8')\n\n    start /= 8\n    while (end > this.length) this.grow()\n    end /= 8\n\n    const offset = start\n    var page = this._getPage(8 * start, true)\n\n    while (start < end) {\n      const delta = end - start < 4096 ? end - start : 4096\n      const s = start - offset\n\n      start += this._setPageBuffer(page, buf.subarray(s, s + delta), start & 1023)\n      if (start !== end) page = this._nextPage(page, 8 * start)\n    }\n  }\n\n  _fillBit (bit, start, end) {\n    var page = this._getPage(start, bit)\n\n    // TODO: this can be optimised a lot in the case of end - start > 32768\n    // in that case clear levels of 32768 ** 2 instead etc\n\n    while (start < end) {\n      const delta = end - start < 32768 ? end - start : 32768\n      start += this._setPageBits(page, bit, start & 32767, delta)\n      if (start !== end) page = this._nextPage(page, start)\n    }\n  }\n\n  _nextPage (page, start) {\n    const i = ++this._offsets[page.level]\n    return i === 32768\n      ? this._getPage(start, true)\n      : this._parents[page.level].children[i] || this._addPage(this._parents[page.level], i)\n  }\n\n  _setPageBuffer (page, buf, start) {\n    new Uint8Array(page.bits.buffer, page.bits.byteOffset, page.bits.length * 4).set(buf, start)\n    start >>>= 2\n    this._update(page, start, start + (buf.length >>> 2) + (buf.length & 3 ? 1 : 0))\n    return buf.length\n  }\n\n  _setPageBits (page, bit, start, end) {\n    const s = start >>> 5\n    const e = end >>> 5\n    const sm = 0xffffffff >>> (start & 31)\n    const em = ~(0xffffffff >>> (end & 31))\n\n    if (s === e) {\n      page.bits[s] = bit\n        ? page.bits[s] | (sm & em)\n        : page.bits[s] & ~(sm & em)\n      this._update(page, s, s + 1)\n      return end - start\n    }\n\n    page.bits[s] = bit\n      ? page.bits[s] | sm\n      : page.bits[s] & (~sm)\n\n    if (e - s > 2) page.bits.fill(bit ? 0xffffffff : 0, s + 1, e - 1)\n\n    if (e === 1024) {\n      page.bits[e - 1] = bit ? 0xffffffff : 0\n      this._update(page, s, e)\n      return end - start\n    }\n\n    page.bits[e] = bit\n      ? page.bits[e] | em\n      : page.bits[e] & (~em)\n\n    this._update(page, s, e + 1)\n    return end - start\n  }\n\n  _update (page, start, end) {\n    for (; start < end; start++) {\n      const upd = page.bits[start]\n      this._updateAllOne(page, start, upd)\n      this._updateOneOne(page, start, upd)\n    }\n  }\n\n  _updateAllOne (page, b, upd) {\n    var i = 1\n\n    do {\n      for (; i < 3; i++) {\n        const buf = page.allOne[i]\n        const r = b & 31\n        const prev = buf[b >>>= 5]\n        buf[b] = upd === 0xffffffff\n          ? (prev | (0x80000000 >>> r))\n          : (prev & ~(0x80000000 >>> r))\n        upd = buf[b]\n        if (upd === prev) return\n      }\n\n      b += this._offsets[page.level]\n      page = this._parents[page.level]\n      i = 0\n    } while (page)\n  }\n\n  _updateOneOne (page, b, upd) {\n    var i = 1\n\n    do {\n      for (; i < 3; i++) {\n        const buf = page.oneOne[i]\n        const r = b & 31\n        const prev = buf[b >>>= 5]\n        buf[b] = upd !== 0\n          ? (prev | (0x80000000 >>> r))\n          : (prev & ~(0x80000000 >>> r))\n        upd = buf[b]\n        if (upd === prev) return\n      }\n\n      b += this._offsets[page.level]\n      page = this._parents[page.level]\n      i = 0\n\n      if (upd === 0 && page) {\n        // all zeros, non root -> free page\n        page.children[this._offsets[page.level - 1]] = undefined\n      }\n    } while (page)\n  }\n\n  _getPage (index, createIfMissing) {\n    factor(index, this._path)\n\n    while (index >= this.length) {\n      if (!createIfMissing) return null\n      this.grow()\n    }\n\n    var page = this._page\n\n    for (var i = page.level; i > 0 && page; i--) {\n      const p = this._path[i]\n      this._parents[i - 1] = page\n      page = page.children[p] || (createIfMissing ? this._addPage(page, p) : null)\n    }\n\n    return page\n  }\n\n  _addPage (page, i) {\n    this._allocs++\n    page = page.children[i] = new Page(page.level - 1)\n    return page\n  }\n}\n\nclass Iterator {\n  constructor (bitfield) {\n    this._bitfield = bitfield\n    this._path = new Uint16Array(5)\n    this._offsets = new Uint16Array(this._path.buffer, this._path.byteOffset + 2, 4)\n    this._parents = new Array(4).fill(null)\n    this._page = null\n    this._allocs = bitfield._allocs\n\n    this.seek(0)\n  }\n\n  seek (index) {\n    this._allocs = this._bitfield._allocs\n\n    if (index >= this._bitfield.length) {\n      this._page = null\n      return this\n    }\n\n    factor(index, this._path)\n\n    this._page = this._bitfield._page\n    for (var i = this._page.level; i > 0; i--) {\n      this._parents[i - 1] = this._page\n      this._page = this._page.children[this._path[i]] || ZEROS[i - 1]\n    }\n\n    return this\n  }\n\n  next (bit) {\n    return bit ? this.nextTrue() : this.nextFalse()\n  }\n\n  nextFalse () {\n    if (this._allocs !== this._bitfield._allocs) {\n      // If a page has been alloced while we are iterating\n      // and we have a zero page in our path we need to reseek\n      // in case that page has been overwritten\n      this.seek(defactor(this._path))\n    }\n\n    var page = this._page\n    var b = this._path[0]\n    var mask = MASK_INCL\n\n    while (page) {\n      for (var i = 0; i < 3; i++) {\n        const r = b & 31\n        const clz = Math.clz32((~page.allOne[i][b >>>= 5]) & mask[r])\n        if (clz !== 32) return this._downLeftFalse(page, i, b, clz)\n        mask = MASK\n      }\n\n      b = this._offsets[page.level]\n      page = this._parents[page.level]\n    }\n\n    return -1\n  }\n\n  _downLeftFalse (page, i, b, clz) {\n    while (true) {\n      while (i) {\n        b = (b << 5) + clz\n        clz = Math.clz32(~page.allOne[--i][b])\n      }\n\n      b = (b << 5) + clz\n\n      if (!page.level) break\n\n      this._parents[page.level - 1] = page\n      this._path[page.level] = b\n\n      page = page.children[b]\n      i = 3\n      clz = b = 0\n    }\n\n    this._page = page\n    this._path[0] = b\n\n    return this._inc()\n  }\n\n  nextTrue () {\n    var page = this._page\n    var b = this._path[0]\n    var mask = MASK_INCL\n\n    while (page) {\n      for (var i = 0; i < 3; i++) {\n        const r = b & 31\n        const clz = Math.clz32(page.oneOne[i][b >>>= 5] & mask[r])\n        if (clz !== 32) return this._downLeftTrue(page, i, b, clz)\n        mask = MASK\n      }\n\n      b = this._offsets[page.level]\n      page = this._parents[page.level]\n    }\n\n    return -1\n  }\n\n  _downLeftTrue (page, i, b, clz) {\n    while (true) {\n      while (i) {\n        b = (b << 5) + clz\n        clz = Math.clz32(page.oneOne[--i][b])\n      }\n\n      b = (b << 5) + clz\n\n      if (!page.level) break\n\n      this._parents[page.level - 1] = page\n      this._path[page.level] = b\n\n      page = page.children[b]\n      i = 3\n      clz = b = 0\n    }\n\n    this._page = page\n    this._path[0] = b\n\n    return this._inc()\n  }\n\n  _inc () {\n    const n = defactor(this._path)\n    if (this._path[0] < 32767) this._path[0]++\n    else this.seek(n + 1)\n    return n\n  }\n}\n\nfunction defactor (out) {\n  return ((((out[3] * 32768 + out[2]) * 32768) + out[1]) * 32768) + out[0]\n}\n\nfunction factor (n, out) {\n  n = (n - (out[0] = (n & 32767))) / 32768\n  n = (n - (out[1] = (n & 32767))) / 32768\n  out[3] = ((n - (out[2] = (n & 32767))) / 32768) & 32767\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/fast-bitfield/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/fast-bitfield/index.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}}],"sources":{"../node_modules/fast-bitfield/index.js":"'use strict'\n\nconst ctz = require('count-trailing-zeros')\n\nmodule.exports = () => new Bitfield()\n\nclass Page {\n  constructor (level) {\n    const buf = new Uint8Array(level ? 8456 : 4360)\n    const b = buf.byteOffset\n\n    this.buffer = buf\n    this.bits = level ? null : new Uint32Array(buf.buffer, b, 1024)\n    this.children = level ? new Array(32768) : null\n    this.level = level\n\n    this.allOne = level\n      ? [\n        new Uint32Array(buf.buffer, b, 1024),\n        new Uint32Array(buf.buffer, b + 4096, 32),\n        new Uint32Array(buf.buffer, b + 4224, 1)\n      ]\n      : [\n        this.bits,\n        new Uint32Array(buf.buffer, b + 4096, 32),\n        new Uint32Array(buf.buffer, b + 4224, 1)\n      ]\n\n    this.oneOne = level\n      ? [\n        new Uint32Array(buf.buffer, b + 4228, 1024),\n        new Uint32Array(buf.buffer, b + 8324, 32),\n        new Uint32Array(buf.buffer, b + 8452, 1)\n      ]\n      : [\n        this.bits,\n        new Uint32Array(buf.buffer, b + 4228, 32),\n        new Uint32Array(buf.buffer, b + 4356, 1)\n      ]\n  }\n}\n\nconst ZEROS = [new Page(0), new Page(1), new Page(2), new Page(3)]\nconst MASK = new Uint32Array(32)\nconst MASK_INCL = new Uint32Array(32)\n\nfor (var i = 0; i < 32; i++) {\n  MASK[i] = Math.pow(2, 31 - i) - 1\n  MASK_INCL[i] = Math.pow(2, 32 - i) - 1\n}\n\nconst LITTLE_ENDIAN = new Uint8Array(MASK.buffer, MASK.byteOffset, 1)[0] === 0xff\n\nclass Bitfield {\n  constructor () {\n    this.length = 32768\n    this.littleEndian = LITTLE_ENDIAN\n\n    this._path = new Uint16Array(5)\n    this._offsets = new Uint16Array(this._path.buffer, this._path.byteOffset + 2, 4)\n    this._parents = new Array(4).fill(null)\n    this._page = new Page(0)\n    this._allocs = 1\n  }\n\n  last () {\n    var page = this._page\n    var b = 0\n\n    while (true) {\n      for (var i = 2; i >= 0; i--) {\n        const c = ctz(page.oneOne[i][b])\n        if (c === 32) return -1\n        b = (b << 5) + (31 - c)\n      }\n\n      this._path[page.level] = b\n      if (!page.level) return defactor(this._path)\n      page = page.children[b]\n      b = 0\n    }\n  }\n\n  set (index, bit) {\n    const page = this._getPage(index, bit)\n    if (!page) return false\n\n    const i = this._path[0]\n    const r = i & 31\n    const b = i >>> 5\n    const prev = page.bits[b]\n\n    page.bits[b] = bit\n      ? (prev | (0x80000000 >>> r))\n      : (prev & ~(0x80000000 >>> r))\n\n    const upd = page.bits[b]\n    if (upd === prev) return false\n\n    this._updateAllOne(page, b, upd)\n    this._updateOneOne(page, b, upd)\n\n    return true\n  }\n\n  get (index) {\n    const page = this._getPage(index, false)\n    if (!page) return false\n\n    const i = this._path[0]\n    const r = i & 31\n\n    return (page.bits[i >>> 5] & (0x80000000 >>> r)) !== 0\n  }\n\n  iterator () {\n    return new Iterator(this)\n  }\n\n  fill (val, start, end) {\n    if (!start) start = 0\n    if (val === true) return this._fillBit(true, start, end === 0 ? end : (end || this.length))\n    if (val === false) return this._fillBit(false, start, end === 0 ? end : (end || this.length))\n    this._fillBuffer(val, start, end === 0 ? end : (end || (start + 8 * val.length)))\n  }\n\n  grow () {\n    if (this._page.level === 3) throw new Error('Cannot grow beyond ' + this.length)\n    const page = this._page\n    this._page = new Page(page.level + 1)\n    this._page.children[0] = page\n    if (this._page.level === 3) this.length = Number.MAX_SAFE_INTEGER\n    else this.length *= 32768\n  }\n\n  _fillBuffer (buf, start, end) {\n    if ((start & 7) || (end & 7)) throw new Error('Offsets must be a multiple of 8')\n\n    start /= 8\n    while (end > this.length) this.grow()\n    end /= 8\n\n    const offset = start\n    var page = this._getPage(8 * start, true)\n\n    while (start < end) {\n      const delta = end - start < 4096 ? end - start : 4096\n      const s = start - offset\n\n      start += this._setPageBuffer(page, buf.subarray(s, s + delta), start & 1023)\n      if (start !== end) page = this._nextPage(page, 8 * start)\n    }\n  }\n\n  _fillBit (bit, start, end) {\n    var page = this._getPage(start, bit)\n\n    // TODO: this can be optimised a lot in the case of end - start > 32768\n    // in that case clear levels of 32768 ** 2 instead etc\n\n    while (start < end) {\n      const delta = end - start < 32768 ? end - start : 32768\n      start += this._setPageBits(page, bit, start & 32767, delta)\n      if (start !== end) page = this._nextPage(page, start)\n    }\n  }\n\n  _nextPage (page, start) {\n    const i = ++this._offsets[page.level]\n    return i === 32768\n      ? this._getPage(start, true)\n      : this._parents[page.level].children[i] || this._addPage(this._parents[page.level], i)\n  }\n\n  _setPageBuffer (page, buf, start) {\n    new Uint8Array(page.bits.buffer, page.bits.byteOffset, page.bits.length * 4).set(buf, start)\n    start >>>= 2\n    this._update(page, start, start + (buf.length >>> 2) + (buf.length & 3 ? 1 : 0))\n    return buf.length\n  }\n\n  _setPageBits (page, bit, start, end) {\n    const s = start >>> 5\n    const e = end >>> 5\n    const sm = 0xffffffff >>> (start & 31)\n    const em = ~(0xffffffff >>> (end & 31))\n\n    if (s === e) {\n      page.bits[s] = bit\n        ? page.bits[s] | (sm & em)\n        : page.bits[s] & ~(sm & em)\n      this._update(page, s, s + 1)\n      return end - start\n    }\n\n    page.bits[s] = bit\n      ? page.bits[s] | sm\n      : page.bits[s] & (~sm)\n\n    if (e - s > 2) page.bits.fill(bit ? 0xffffffff : 0, s + 1, e - 1)\n\n    if (e === 1024) {\n      page.bits[e - 1] = bit ? 0xffffffff : 0\n      this._update(page, s, e)\n      return end - start\n    }\n\n    page.bits[e] = bit\n      ? page.bits[e] | em\n      : page.bits[e] & (~em)\n\n    this._update(page, s, e + 1)\n    return end - start\n  }\n\n  _update (page, start, end) {\n    for (; start < end; start++) {\n      const upd = page.bits[start]\n      this._updateAllOne(page, start, upd)\n      this._updateOneOne(page, start, upd)\n    }\n  }\n\n  _updateAllOne (page, b, upd) {\n    var i = 1\n\n    do {\n      for (; i < 3; i++) {\n        const buf = page.allOne[i]\n        const r = b & 31\n        const prev = buf[b >>>= 5]\n        buf[b] = upd === 0xffffffff\n          ? (prev | (0x80000000 >>> r))\n          : (prev & ~(0x80000000 >>> r))\n        upd = buf[b]\n        if (upd === prev) return\n      }\n\n      b += this._offsets[page.level]\n      page = this._parents[page.level]\n      i = 0\n    } while (page)\n  }\n\n  _updateOneOne (page, b, upd) {\n    var i = 1\n\n    do {\n      for (; i < 3; i++) {\n        const buf = page.oneOne[i]\n        const r = b & 31\n        const prev = buf[b >>>= 5]\n        buf[b] = upd !== 0\n          ? (prev | (0x80000000 >>> r))\n          : (prev & ~(0x80000000 >>> r))\n        upd = buf[b]\n        if (upd === prev) return\n      }\n\n      b += this._offsets[page.level]\n      page = this._parents[page.level]\n      i = 0\n\n      if (upd === 0 && page) {\n        // all zeros, non root -> free page\n        page.children[this._offsets[page.level - 1]] = undefined\n      }\n    } while (page)\n  }\n\n  _getPage (index, createIfMissing) {\n    factor(index, this._path)\n\n    while (index >= this.length) {\n      if (!createIfMissing) return null\n      this.grow()\n    }\n\n    var page = this._page\n\n    for (var i = page.level; i > 0 && page; i--) {\n      const p = this._path[i]\n      this._parents[i - 1] = page\n      page = page.children[p] || (createIfMissing ? this._addPage(page, p) : null)\n    }\n\n    return page\n  }\n\n  _addPage (page, i) {\n    this._allocs++\n    page = page.children[i] = new Page(page.level - 1)\n    return page\n  }\n}\n\nclass Iterator {\n  constructor (bitfield) {\n    this._bitfield = bitfield\n    this._path = new Uint16Array(5)\n    this._offsets = new Uint16Array(this._path.buffer, this._path.byteOffset + 2, 4)\n    this._parents = new Array(4).fill(null)\n    this._page = null\n    this._allocs = bitfield._allocs\n\n    this.seek(0)\n  }\n\n  seek (index) {\n    this._allocs = this._bitfield._allocs\n\n    if (index >= this._bitfield.length) {\n      this._page = null\n      return this\n    }\n\n    factor(index, this._path)\n\n    this._page = this._bitfield._page\n    for (var i = this._page.level; i > 0; i--) {\n      this._parents[i - 1] = this._page\n      this._page = this._page.children[this._path[i]] || ZEROS[i - 1]\n    }\n\n    return this\n  }\n\n  next (bit) {\n    return bit ? this.nextTrue() : this.nextFalse()\n  }\n\n  nextFalse () {\n    if (this._allocs !== this._bitfield._allocs) {\n      // If a page has been alloced while we are iterating\n      // and we have a zero page in our path we need to reseek\n      // in case that page has been overwritten\n      this.seek(defactor(this._path))\n    }\n\n    var page = this._page\n    var b = this._path[0]\n    var mask = MASK_INCL\n\n    while (page) {\n      for (var i = 0; i < 3; i++) {\n        const r = b & 31\n        const clz = Math.clz32((~page.allOne[i][b >>>= 5]) & mask[r])\n        if (clz !== 32) return this._downLeftFalse(page, i, b, clz)\n        mask = MASK\n      }\n\n      b = this._offsets[page.level]\n      page = this._parents[page.level]\n    }\n\n    return -1\n  }\n\n  _downLeftFalse (page, i, b, clz) {\n    while (true) {\n      while (i) {\n        b = (b << 5) + clz\n        clz = Math.clz32(~page.allOne[--i][b])\n      }\n\n      b = (b << 5) + clz\n\n      if (!page.level) break\n\n      this._parents[page.level - 1] = page\n      this._path[page.level] = b\n\n      page = page.children[b]\n      i = 3\n      clz = b = 0\n    }\n\n    this._page = page\n    this._path[0] = b\n\n    return this._inc()\n  }\n\n  nextTrue () {\n    var page = this._page\n    var b = this._path[0]\n    var mask = MASK_INCL\n\n    while (page) {\n      for (var i = 0; i < 3; i++) {\n        const r = b & 31\n        const clz = Math.clz32(page.oneOne[i][b >>>= 5] & mask[r])\n        if (clz !== 32) return this._downLeftTrue(page, i, b, clz)\n        mask = MASK\n      }\n\n      b = this._offsets[page.level]\n      page = this._parents[page.level]\n    }\n\n    return -1\n  }\n\n  _downLeftTrue (page, i, b, clz) {\n    while (true) {\n      while (i) {\n        b = (b << 5) + clz\n        clz = Math.clz32(page.oneOne[--i][b])\n      }\n\n      b = (b << 5) + clz\n\n      if (!page.level) break\n\n      this._parents[page.level - 1] = page\n      this._path[page.level] = b\n\n      page = page.children[b]\n      i = 3\n      clz = b = 0\n    }\n\n    this._page = page\n    this._path[0] = b\n\n    return this._inc()\n  }\n\n  _inc () {\n    const n = defactor(this._path)\n    if (this._path[0] < 32767) this._path[0]++\n    else this.seek(n + 1)\n    return n\n  }\n}\n\nfunction defactor (out) {\n  return ((((out[3] * 32768 + out[2]) * 32768) + out[1]) * 32768) + out[0]\n}\n\nfunction factor (n, out) {\n  n = (n - (out[0] = (n & 32767))) / 32768\n  n = (n - (out[1] = (n & 32767))) / 32768\n  out[3] = ((n - (out[2] = (n & 32767))) / 32768) & 32767\n}\n"},"lineCount":446}},"error":null,"hash":"c6ef86e13422ed2e0dde303137a0ddb3","cacheData":{"env":{}}}