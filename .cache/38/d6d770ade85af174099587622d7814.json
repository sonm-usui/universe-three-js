{"id":"../node_modules/dat-encoding/index.js","dependencies":[{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/package.json","includedInParent":true,"mtime":1676236562742},{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/dat-encoding/package.json","includedInParent":true,"mtime":1676236529507},{"name":"safe-buffer","loc":{"line":3,"column":21,"index":35},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/dat-encoding/index.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/safe-buffer/index.js"}],"generated":{"js":"\n'use strict'\n\nvar Buffer = require('safe-buffer').Buffer\n\nfunction encode (buf) {\n  if (typeof buf === 'string') return encode(decode(buf))\n  if (!Buffer.isBuffer(buf)) throw new Error('Not a buffer')\n  if (buf.length !== 32) throw new Error('Invalid buffer')\n  return buf.toString('hex')\n}\n\nfunction decode (str) {\n  if (Buffer.isBuffer(str)) return decode(encode(str))\n  if (typeof str !== 'string') throw new Error('Not a string')\n  // looking for an hexa string of 64 or 65 consecutive chars\n  var match = /([a-f0-9]{64,65})/i.exec(str)\n  // we need exactly 64, so an hexa string with 65 chars (or more) is not allowed\n  if (!match || match[1].length !== 64) throw new Error('Invalid key')\n  return Buffer.from(match[1], 'hex')\n}\n\nexports.encode = exports.toStr = encode\nexports.decode = exports.toBuf = decode\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/dat-encoding/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/dat-encoding/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}}],"sources":{"../node_modules/dat-encoding/index.js":"'use strict'\n\nvar Buffer = require('safe-buffer').Buffer\n\nfunction encode (buf) {\n  if (typeof buf === 'string') return encode(decode(buf))\n  if (!Buffer.isBuffer(buf)) throw new Error('Not a buffer')\n  if (buf.length !== 32) throw new Error('Invalid buffer')\n  return buf.toString('hex')\n}\n\nfunction decode (str) {\n  if (Buffer.isBuffer(str)) return decode(encode(str))\n  if (typeof str !== 'string') throw new Error('Not a string')\n  // looking for an hexa string of 64 or 65 consecutive chars\n  var match = /([a-f0-9]{64,65})/i.exec(str)\n  // we need exactly 64, so an hexa string with 65 chars (or more) is not allowed\n  if (!match || match[1].length !== 64) throw new Error('Invalid key')\n  return Buffer.from(match[1], 'hex')\n}\n\nexports.encode = exports.toStr = encode\nexports.decode = exports.toBuf = decode\n"},"lineCount":25}},"error":null,"hash":"ea96d75295f4f5657fb494c559f3a266","cacheData":{"env":{}}}