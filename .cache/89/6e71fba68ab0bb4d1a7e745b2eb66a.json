{"id":"../node_modules/hypercore/lib/bitfield.js","dependencies":[{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/package.json","includedInParent":true,"mtime":1676236562742},{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/hypercore/package.json","includedInParent":true,"mtime":1676236539120},{"name":"flat-tree","loc":{"line":1,"column":19,"index":19},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/hypercore/lib/bitfield.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/flat-tree/index.js"},{"name":"bitfield-rle","loc":{"line":2,"column":18,"index":50},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/hypercore/lib/bitfield.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/bitfield-rle/index.js"},{"name":"memory-pager","loc":{"line":3,"column":20,"index":86},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/hypercore/lib/bitfield.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/memory-pager/index.js"},{"name":"sparse-bitfield","loc":{"line":4,"column":23,"index":125},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/hypercore/lib/bitfield.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/sparse-bitfield/index.js"},{"name":"buffer","parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/hypercore/lib/bitfield.js","resolved":"/Users/sonamchoeda/.nvm/versions/node/v14.18.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nvar flat = require('flat-tree')\nvar rle = require('bitfield-rle')\nvar pager = require('memory-pager')\nvar bitfield = require('sparse-bitfield')\n\nvar INDEX_UPDATE_MASK = [63, 207, 243, 252]\nvar INDEX_ITERATE_MASK = [0, 192, 240, 252]\nvar DATA_ITERATE_MASK = [128, 192, 224, 240, 248, 252, 254, 255]\nvar DATA_UPDATE_MASK = [127, 191, 223, 239, 247, 251, 253, 254]\nvar MAP_PARENT_RIGHT = new Array(256)\nvar MAP_PARENT_LEFT = new Array(256)\nvar NEXT_DATA_0_BIT = new Array(256)\nvar NEXT_INDEX_0_BIT = new Array(256)\nvar TOTAL_1_BITS = new Array(256)\n\nfor (var i = 0; i < 256; i++) {\n  var a = (i & (15 << 4)) >> 4\n  var b = i & 15\n  var nibble = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]\n  MAP_PARENT_RIGHT[i] = ((a === 15 ? 3 : a === 0 ? 0 : 1) << 2) | (b === 15 ? 3 : b === 0 ? 0 : 1)\n  MAP_PARENT_LEFT[i] = MAP_PARENT_RIGHT[i] << 4\n  NEXT_DATA_0_BIT[i] = i === 255 ? -1 : (8 - Math.ceil(Math.log(256 - i) / Math.log(2)))\n  NEXT_INDEX_0_BIT[i] = i === 255 ? -1 : Math.floor(NEXT_DATA_0_BIT[i] / 2)\n  TOTAL_1_BITS[i] = nibble[i >> 4] + nibble[i & 0x0F]\n}\n\nmodule.exports = Bitfield\n\nfunction Bitfield (pageSize, pages) {\n  if (!(this instanceof Bitfield)) return new Bitfield(pageSize, pages)\n  if (!pageSize) pageSize = 2048 + 1024 + 512\n\n  var deduplicate = Buffer.allocUnsafe(pageSize)\n  deduplicate.fill(255)\n\n  this.indexSize = pageSize - 2048 - 1024\n  this.pages = pager(pageSize, { deduplicate })\n\n  if (pages) {\n    for (var i = 0; i < pages.length; i++) {\n      this.pages.set(i, pages[i])\n    }\n  }\n\n  this.data = bitfield({\n    pageSize: 1024,\n    pageOffset: 0,\n    pages: this.pages,\n    trackUpdates: true\n  })\n\n  this.tree = bitfield({\n    pageSize: 2048,\n    pageOffset: 1024,\n    pages: this.pages,\n    trackUpdates: true\n  })\n\n  this.index = bitfield({\n    pageSize: this.indexSize,\n    pageOffset: 1024 + 2048,\n    pages: this.pages,\n    trackUpdates: true\n  })\n\n  this.length = this.data.length\n  this._iterator = flat.iterator(0)\n}\n\nBitfield.prototype.set = function (i, value) {\n  var o = i & 7\n  i = (i - o) / 8\n  var v = value ? this.data.getByte(i) | (128 >> o) : this.data.getByte(i) & DATA_UPDATE_MASK[o]\n\n  if (!this.data.setByte(i, v)) return false\n  this.length = this.data.length\n  this._setIndex(i, v)\n  return true\n}\n\nBitfield.prototype.get = function (i) {\n  return this.data.get(i)\n}\n\nBitfield.prototype.total = function (start, end) {\n  if (!start || start < 0) start = 0\n  if (!end) end = this.data.length\n  if (end < start) return 0\n  if (end > this.data.length) {\n    this._expand(end)\n  }\n  var o = start & 7\n  var e = end & 7\n  var pos = (start - o) / 8\n  var last = (end - e) / 8\n  var leftMask = (255 - (o ? DATA_ITERATE_MASK[o - 1] : 0))\n  var rightMask = (e ? DATA_ITERATE_MASK[e - 1] : 0)\n  var byte = this.data.getByte(pos)\n  if (pos === last) {\n    return TOTAL_1_BITS[byte & leftMask & rightMask]\n  }\n  var total = TOTAL_1_BITS[byte & leftMask]\n  for (var i = pos + 1; i < last; i++) {\n    total += TOTAL_1_BITS[this.data.getByte(i)]\n  }\n  total += TOTAL_1_BITS[this.data.getByte(last) & rightMask]\n  return total\n}\n\n// TODO: use the index to speed this up *a lot*\nBitfield.prototype.compress = function (start, length) {\n  if (!start && !length) return rle.encode(this.data.toBuffer())\n\n  var buf = Buffer.alloc(length)\n  var p = start / this.data.pageSize / 8\n  var end = p + length / this.data.pageSize / 8\n  var offset = p * this.data.pageSize\n\n  for (; p < end; p++) {\n    var page = this.data.pages.get(p, true)\n    if (!page || !page.buffer) continue\n    page.buffer.copy(buf, p * this.data.pageSize - offset, this.data.pageOffset, this.data.pageOffset + this.data.pageSize)\n  }\n\n  return rle.encode(buf)\n}\n\nBitfield.prototype._setIndex = function (i, value) {\n  //                    (a + b | c + d | e + f | g + h)\n  // -> (a | b | c | d)                                (e | f | g | h)\n  //\n\n  var o = i & 3\n  i = (i - o) / 4\n\n  var bitfield = this.index\n  var ite = this._iterator\n  var start = 2 * i\n  var byte = (bitfield.getByte(start) & INDEX_UPDATE_MASK[o]) | (getIndexValue(value) >> (2 * o))\n  var len = bitfield.length\n  var maxLength = this.pages.length * this.indexSize\n\n  ite.seek(start)\n\n  while (ite.index < maxLength && bitfield.setByte(ite.index, byte)) {\n    if (ite.isLeft()) {\n      byte = MAP_PARENT_LEFT[byte] | MAP_PARENT_RIGHT[bitfield.getByte(ite.sibling())]\n    } else {\n      byte = MAP_PARENT_RIGHT[byte] | MAP_PARENT_LEFT[bitfield.getByte(ite.sibling())]\n    }\n    ite.parent()\n  }\n\n  if (len !== bitfield.length) this._expand(len)\n\n  return ite.index !== start\n}\n\nBitfield.prototype._expand = function (len) {\n  var roots = flat.fullRoots(2 * len)\n  var bitfield = this.index\n  var ite = this._iterator\n  var byte = 0\n\n  for (var i = 0; i < roots.length; i++) {\n    ite.seek(roots[i])\n    byte = bitfield.getByte(ite.index)\n\n    do {\n      if (ite.isLeft()) {\n        byte = MAP_PARENT_LEFT[byte] | MAP_PARENT_RIGHT[bitfield.getByte(ite.sibling())]\n      } else {\n        byte = MAP_PARENT_RIGHT[byte] | MAP_PARENT_LEFT[bitfield.getByte(ite.sibling())]\n      }\n    } while (setByteNoAlloc(bitfield, ite.parent(), byte))\n  }\n}\n\nfunction setByteNoAlloc (bitfield, i, b) {\n  if (8 * i >= bitfield.length) return false\n  return bitfield.setByte(i, b)\n}\n\nBitfield.prototype.iterator = function (start, end) {\n  var ite = new Iterator(this)\n\n  ite.range(start || 0, end || this.length)\n  ite.seek(0)\n\n  return ite\n}\n\nfunction Iterator (bitfield) {\n  this.start = 0\n  this.end = 0\n\n  this._indexEnd = 0\n  this._pos = 0\n  this._byte = 0\n  this._bitfield = bitfield\n}\n\nIterator.prototype.range = function (start, end) {\n  this.start = start\n  this.end = end\n  this._indexEnd = 2 * Math.ceil(end / 32)\n\n  if (this.end > this._bitfield.length) {\n    this._bitfield._expand(this.end)\n  }\n\n  return this\n}\n\nIterator.prototype.seek = function (offset) {\n  offset += this.start\n  if (offset < this.start) offset = this.start\n\n  if (offset >= this.end) {\n    this._pos = -1\n    return this\n  }\n\n  var o = offset & 7\n\n  this._pos = (offset - o) / 8\n  this._byte = this._bitfield.data.getByte(this._pos) | (o ? DATA_ITERATE_MASK[o - 1] : 0)\n\n  return this\n}\n\nIterator.prototype.random = function () {\n  var i = this.seek(Math.floor(Math.random() * (this.end - this.start))).next()\n  return i === -1 ? this.seek(0).next() : i\n}\n\nIterator.prototype.next = function () {\n  if (this._pos === -1) return -1\n\n  var dataBitfield = this._bitfield.data\n  var free = NEXT_DATA_0_BIT[this._byte]\n\n  while (free === -1) {\n    this._byte = dataBitfield.getByte(++this._pos)\n    free = NEXT_DATA_0_BIT[this._byte]\n\n    if (free === -1) {\n      this._pos = this._skipAhead(this._pos)\n      if (this._pos === -1) return -1\n\n      this._byte = dataBitfield.getByte(this._pos)\n      free = NEXT_DATA_0_BIT[this._byte]\n    }\n  }\n\n  this._byte |= DATA_ITERATE_MASK[free]\n\n  var n = 8 * this._pos + free\n  return n < this.end ? n : -1\n}\n\nIterator.prototype.peek = function () {\n  if (this._pos === -1) return -1\n\n  var free = NEXT_DATA_0_BIT[this._byte]\n  var n = 8 * this._pos + free\n  return n < this.end ? n : -1\n}\n\nIterator.prototype._skipAhead = function (start) {\n  var indexBitfield = this._bitfield.index\n  var treeEnd = this._indexEnd\n  var ite = this._bitfield._iterator\n  var o = start & 3\n\n  ite.seek(2 * ((start - o) / 4))\n\n  var treeByte = indexBitfield.getByte(ite.index) | INDEX_ITERATE_MASK[o]\n\n  while (NEXT_INDEX_0_BIT[treeByte] === -1) {\n    if (ite.isLeft()) {\n      ite.next()\n    } else {\n      ite.next()\n      ite.parent()\n    }\n\n    if (rightSpan(ite) >= treeEnd) {\n      while (rightSpan(ite) >= treeEnd && isParent(ite)) ite.leftChild()\n      if (rightSpan(ite) >= treeEnd) return -1\n    }\n\n    treeByte = indexBitfield.getByte(ite.index)\n  }\n\n  while (ite.factor > 2) {\n    if (NEXT_INDEX_0_BIT[treeByte] < 2) ite.leftChild()\n    else ite.rightChild()\n\n    treeByte = indexBitfield.getByte(ite.index)\n  }\n\n  var free = NEXT_INDEX_0_BIT[treeByte]\n  if (free === -1) free = 4\n\n  var next = ite.index * 2 + free\n\n  return next <= start ? start + 1 : next\n}\n\nfunction rightSpan (ite) {\n  return ite.index + ite.factor / 2 - 1\n}\n\nfunction isParent (ite) {\n  return ite.index & 1\n}\n\nfunction getIndexValue (n) {\n  switch (n) {\n    case 255: return 192\n    case 0: return 0\n    default: return 64\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/hypercore/lib/bitfield.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}}],"sources":{"../node_modules/hypercore/lib/bitfield.js":"var flat = require('flat-tree')\nvar rle = require('bitfield-rle')\nvar pager = require('memory-pager')\nvar bitfield = require('sparse-bitfield')\n\nvar INDEX_UPDATE_MASK = [63, 207, 243, 252]\nvar INDEX_ITERATE_MASK = [0, 192, 240, 252]\nvar DATA_ITERATE_MASK = [128, 192, 224, 240, 248, 252, 254, 255]\nvar DATA_UPDATE_MASK = [127, 191, 223, 239, 247, 251, 253, 254]\nvar MAP_PARENT_RIGHT = new Array(256)\nvar MAP_PARENT_LEFT = new Array(256)\nvar NEXT_DATA_0_BIT = new Array(256)\nvar NEXT_INDEX_0_BIT = new Array(256)\nvar TOTAL_1_BITS = new Array(256)\n\nfor (var i = 0; i < 256; i++) {\n  var a = (i & (15 << 4)) >> 4\n  var b = i & 15\n  var nibble = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]\n  MAP_PARENT_RIGHT[i] = ((a === 15 ? 3 : a === 0 ? 0 : 1) << 2) | (b === 15 ? 3 : b === 0 ? 0 : 1)\n  MAP_PARENT_LEFT[i] = MAP_PARENT_RIGHT[i] << 4\n  NEXT_DATA_0_BIT[i] = i === 255 ? -1 : (8 - Math.ceil(Math.log(256 - i) / Math.log(2)))\n  NEXT_INDEX_0_BIT[i] = i === 255 ? -1 : Math.floor(NEXT_DATA_0_BIT[i] / 2)\n  TOTAL_1_BITS[i] = nibble[i >> 4] + nibble[i & 0x0F]\n}\n\nmodule.exports = Bitfield\n\nfunction Bitfield (pageSize, pages) {\n  if (!(this instanceof Bitfield)) return new Bitfield(pageSize, pages)\n  if (!pageSize) pageSize = 2048 + 1024 + 512\n\n  var deduplicate = Buffer.allocUnsafe(pageSize)\n  deduplicate.fill(255)\n\n  this.indexSize = pageSize - 2048 - 1024\n  this.pages = pager(pageSize, { deduplicate })\n\n  if (pages) {\n    for (var i = 0; i < pages.length; i++) {\n      this.pages.set(i, pages[i])\n    }\n  }\n\n  this.data = bitfield({\n    pageSize: 1024,\n    pageOffset: 0,\n    pages: this.pages,\n    trackUpdates: true\n  })\n\n  this.tree = bitfield({\n    pageSize: 2048,\n    pageOffset: 1024,\n    pages: this.pages,\n    trackUpdates: true\n  })\n\n  this.index = bitfield({\n    pageSize: this.indexSize,\n    pageOffset: 1024 + 2048,\n    pages: this.pages,\n    trackUpdates: true\n  })\n\n  this.length = this.data.length\n  this._iterator = flat.iterator(0)\n}\n\nBitfield.prototype.set = function (i, value) {\n  var o = i & 7\n  i = (i - o) / 8\n  var v = value ? this.data.getByte(i) | (128 >> o) : this.data.getByte(i) & DATA_UPDATE_MASK[o]\n\n  if (!this.data.setByte(i, v)) return false\n  this.length = this.data.length\n  this._setIndex(i, v)\n  return true\n}\n\nBitfield.prototype.get = function (i) {\n  return this.data.get(i)\n}\n\nBitfield.prototype.total = function (start, end) {\n  if (!start || start < 0) start = 0\n  if (!end) end = this.data.length\n  if (end < start) return 0\n  if (end > this.data.length) {\n    this._expand(end)\n  }\n  var o = start & 7\n  var e = end & 7\n  var pos = (start - o) / 8\n  var last = (end - e) / 8\n  var leftMask = (255 - (o ? DATA_ITERATE_MASK[o - 1] : 0))\n  var rightMask = (e ? DATA_ITERATE_MASK[e - 1] : 0)\n  var byte = this.data.getByte(pos)\n  if (pos === last) {\n    return TOTAL_1_BITS[byte & leftMask & rightMask]\n  }\n  var total = TOTAL_1_BITS[byte & leftMask]\n  for (var i = pos + 1; i < last; i++) {\n    total += TOTAL_1_BITS[this.data.getByte(i)]\n  }\n  total += TOTAL_1_BITS[this.data.getByte(last) & rightMask]\n  return total\n}\n\n// TODO: use the index to speed this up *a lot*\nBitfield.prototype.compress = function (start, length) {\n  if (!start && !length) return rle.encode(this.data.toBuffer())\n\n  var buf = Buffer.alloc(length)\n  var p = start / this.data.pageSize / 8\n  var end = p + length / this.data.pageSize / 8\n  var offset = p * this.data.pageSize\n\n  for (; p < end; p++) {\n    var page = this.data.pages.get(p, true)\n    if (!page || !page.buffer) continue\n    page.buffer.copy(buf, p * this.data.pageSize - offset, this.data.pageOffset, this.data.pageOffset + this.data.pageSize)\n  }\n\n  return rle.encode(buf)\n}\n\nBitfield.prototype._setIndex = function (i, value) {\n  //                    (a + b | c + d | e + f | g + h)\n  // -> (a | b | c | d)                                (e | f | g | h)\n  //\n\n  var o = i & 3\n  i = (i - o) / 4\n\n  var bitfield = this.index\n  var ite = this._iterator\n  var start = 2 * i\n  var byte = (bitfield.getByte(start) & INDEX_UPDATE_MASK[o]) | (getIndexValue(value) >> (2 * o))\n  var len = bitfield.length\n  var maxLength = this.pages.length * this.indexSize\n\n  ite.seek(start)\n\n  while (ite.index < maxLength && bitfield.setByte(ite.index, byte)) {\n    if (ite.isLeft()) {\n      byte = MAP_PARENT_LEFT[byte] | MAP_PARENT_RIGHT[bitfield.getByte(ite.sibling())]\n    } else {\n      byte = MAP_PARENT_RIGHT[byte] | MAP_PARENT_LEFT[bitfield.getByte(ite.sibling())]\n    }\n    ite.parent()\n  }\n\n  if (len !== bitfield.length) this._expand(len)\n\n  return ite.index !== start\n}\n\nBitfield.prototype._expand = function (len) {\n  var roots = flat.fullRoots(2 * len)\n  var bitfield = this.index\n  var ite = this._iterator\n  var byte = 0\n\n  for (var i = 0; i < roots.length; i++) {\n    ite.seek(roots[i])\n    byte = bitfield.getByte(ite.index)\n\n    do {\n      if (ite.isLeft()) {\n        byte = MAP_PARENT_LEFT[byte] | MAP_PARENT_RIGHT[bitfield.getByte(ite.sibling())]\n      } else {\n        byte = MAP_PARENT_RIGHT[byte] | MAP_PARENT_LEFT[bitfield.getByte(ite.sibling())]\n      }\n    } while (setByteNoAlloc(bitfield, ite.parent(), byte))\n  }\n}\n\nfunction setByteNoAlloc (bitfield, i, b) {\n  if (8 * i >= bitfield.length) return false\n  return bitfield.setByte(i, b)\n}\n\nBitfield.prototype.iterator = function (start, end) {\n  var ite = new Iterator(this)\n\n  ite.range(start || 0, end || this.length)\n  ite.seek(0)\n\n  return ite\n}\n\nfunction Iterator (bitfield) {\n  this.start = 0\n  this.end = 0\n\n  this._indexEnd = 0\n  this._pos = 0\n  this._byte = 0\n  this._bitfield = bitfield\n}\n\nIterator.prototype.range = function (start, end) {\n  this.start = start\n  this.end = end\n  this._indexEnd = 2 * Math.ceil(end / 32)\n\n  if (this.end > this._bitfield.length) {\n    this._bitfield._expand(this.end)\n  }\n\n  return this\n}\n\nIterator.prototype.seek = function (offset) {\n  offset += this.start\n  if (offset < this.start) offset = this.start\n\n  if (offset >= this.end) {\n    this._pos = -1\n    return this\n  }\n\n  var o = offset & 7\n\n  this._pos = (offset - o) / 8\n  this._byte = this._bitfield.data.getByte(this._pos) | (o ? DATA_ITERATE_MASK[o - 1] : 0)\n\n  return this\n}\n\nIterator.prototype.random = function () {\n  var i = this.seek(Math.floor(Math.random() * (this.end - this.start))).next()\n  return i === -1 ? this.seek(0).next() : i\n}\n\nIterator.prototype.next = function () {\n  if (this._pos === -1) return -1\n\n  var dataBitfield = this._bitfield.data\n  var free = NEXT_DATA_0_BIT[this._byte]\n\n  while (free === -1) {\n    this._byte = dataBitfield.getByte(++this._pos)\n    free = NEXT_DATA_0_BIT[this._byte]\n\n    if (free === -1) {\n      this._pos = this._skipAhead(this._pos)\n      if (this._pos === -1) return -1\n\n      this._byte = dataBitfield.getByte(this._pos)\n      free = NEXT_DATA_0_BIT[this._byte]\n    }\n  }\n\n  this._byte |= DATA_ITERATE_MASK[free]\n\n  var n = 8 * this._pos + free\n  return n < this.end ? n : -1\n}\n\nIterator.prototype.peek = function () {\n  if (this._pos === -1) return -1\n\n  var free = NEXT_DATA_0_BIT[this._byte]\n  var n = 8 * this._pos + free\n  return n < this.end ? n : -1\n}\n\nIterator.prototype._skipAhead = function (start) {\n  var indexBitfield = this._bitfield.index\n  var treeEnd = this._indexEnd\n  var ite = this._bitfield._iterator\n  var o = start & 3\n\n  ite.seek(2 * ((start - o) / 4))\n\n  var treeByte = indexBitfield.getByte(ite.index) | INDEX_ITERATE_MASK[o]\n\n  while (NEXT_INDEX_0_BIT[treeByte] === -1) {\n    if (ite.isLeft()) {\n      ite.next()\n    } else {\n      ite.next()\n      ite.parent()\n    }\n\n    if (rightSpan(ite) >= treeEnd) {\n      while (rightSpan(ite) >= treeEnd && isParent(ite)) ite.leftChild()\n      if (rightSpan(ite) >= treeEnd) return -1\n    }\n\n    treeByte = indexBitfield.getByte(ite.index)\n  }\n\n  while (ite.factor > 2) {\n    if (NEXT_INDEX_0_BIT[treeByte] < 2) ite.leftChild()\n    else ite.rightChild()\n\n    treeByte = indexBitfield.getByte(ite.index)\n  }\n\n  var free = NEXT_INDEX_0_BIT[treeByte]\n  if (free === -1) free = 4\n\n  var next = ite.index * 2 + free\n\n  return next <= start ? start + 1 : next\n}\n\nfunction rightSpan (ite) {\n  return ite.index + ite.factor / 2 - 1\n}\n\nfunction isParent (ite) {\n  return ite.index & 1\n}\n\nfunction getIndexValue (n) {\n  switch (n) {\n    case 255: return 192\n    case 0: return 0\n    default: return 64\n  }\n}\n"},"lineCount":327}},"error":null,"hash":"77fe7b04b493c092ec3a389d8a96e2b5","cacheData":{"env":{}}}