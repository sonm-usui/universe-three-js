{"id":"../node_modules/dht-rpc/lib/query-table.js","dependencies":[{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/package.json","includedInParent":true,"mtime":1676236562742},{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/dht-rpc/package.json","includedInParent":true,"mtime":1676236546463},{"name":"xor-distance","loc":{"line":1,"column":20,"index":20},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/dht-rpc/lib/query-table.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/xor-distance/index.js"}],"generated":{"js":"const xor = require('xor-distance')\n\nclass QueryTable {\n  constructor (id, target) {\n    this.k = 20\n    this.id = id\n    this.target = target\n    this.closest = []\n    this.unverified = []\n  }\n\n  addUnverified (node, referrer) {\n    if (node.id.equals(this.id)) return\n\n    node.distance = xor(this.target, node.id)\n    node.referrer = referrer\n\n    insertSorted(node, this.k, this.unverified)\n  }\n\n  addVerified (message, peer) {\n    if (!message.id || !message.roundtripToken || message.id.equals(this.id)) {\n      return\n    }\n\n    var prev = getNode(message.id, this.unverified)\n\n    if (!prev) {\n      prev = {\n        id: message.id,\n        host: peer.host,\n        port: peer.port,\n        distance: xor(message.id, this.target)\n      }\n    }\n\n    prev.roundtripToken = message.roundtripToken\n    insertSorted(prev, this.k, this.closest)\n  }\n}\n\nmodule.exports = QueryTable\n\nfunction getNode (id, list) {\n  // find id in the list.\n  // technically this would be faster with binary search (against distance)\n  // but this list is always small, so meh\n\n  for (var i = 0; i < list.length; i++) {\n    if (list[i].id.equals(id)) return list[i]\n  }\n\n  return null\n}\n\nfunction insertSorted (node, max, list) {\n  if (list.length === max && !xor.lt(node.distance, list[max - 1].distance)) return\n  if (getNode(node.id, list)) return\n\n  if (list.length < max) list.push(node)\n  else list[max - 1] = node\n\n  var pos = list.length - 1\n  while (pos && xor.gt(list[pos - 1].distance, node.distance)) {\n    list[pos] = list[pos - 1]\n    list[pos - 1] = node\n    pos--\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/dht-rpc/lib/query-table.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}}],"sources":{"../node_modules/dht-rpc/lib/query-table.js":"const xor = require('xor-distance')\n\nclass QueryTable {\n  constructor (id, target) {\n    this.k = 20\n    this.id = id\n    this.target = target\n    this.closest = []\n    this.unverified = []\n  }\n\n  addUnverified (node, referrer) {\n    if (node.id.equals(this.id)) return\n\n    node.distance = xor(this.target, node.id)\n    node.referrer = referrer\n\n    insertSorted(node, this.k, this.unverified)\n  }\n\n  addVerified (message, peer) {\n    if (!message.id || !message.roundtripToken || message.id.equals(this.id)) {\n      return\n    }\n\n    var prev = getNode(message.id, this.unverified)\n\n    if (!prev) {\n      prev = {\n        id: message.id,\n        host: peer.host,\n        port: peer.port,\n        distance: xor(message.id, this.target)\n      }\n    }\n\n    prev.roundtripToken = message.roundtripToken\n    insertSorted(prev, this.k, this.closest)\n  }\n}\n\nmodule.exports = QueryTable\n\nfunction getNode (id, list) {\n  // find id in the list.\n  // technically this would be faster with binary search (against distance)\n  // but this list is always small, so meh\n\n  for (var i = 0; i < list.length; i++) {\n    if (list[i].id.equals(id)) return list[i]\n  }\n\n  return null\n}\n\nfunction insertSorted (node, max, list) {\n  if (list.length === max && !xor.lt(node.distance, list[max - 1].distance)) return\n  if (getNode(node.id, list)) return\n\n  if (list.length < max) list.push(node)\n  else list[max - 1] = node\n\n  var pos = list.length - 1\n  while (pos && xor.gt(list[pos - 1].distance, node.distance)) {\n    list[pos] = list[pos - 1]\n    list[pos - 1] = node\n    pos--\n  }\n}\n"},"lineCount":70}},"error":null,"hash":"77e4968e4a5290a2e20dbf5ef89c2b64","cacheData":{"env":{}}}