{"id":"../node_modules/@hyperswarm/hypersign/index.js","dependencies":[{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/package.json","includedInParent":true,"mtime":1676236562742},{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/@hyperswarm/hypersign/package.json","includedInParent":true,"mtime":1676236546443},{"name":"assert","loc":{"line":2,"column":23,"index":36},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/@hyperswarm/hypersign/index.js","resolved":"/Users/sonamchoeda/.nvm/versions/node/v14.18.0/lib/node_modules/parcel-bundler/node_modules/assert/assert.js"},{"name":"sodium-native","loc":{"line":11,"column":12,"index":300},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/@hyperswarm/hypersign/index.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/sodium-native/index.js"},{"name":"buffer","parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/@hyperswarm/hypersign/index.js","resolved":"/Users/sonamchoeda/.nvm/versions/node/v14.18.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict'\nconst assert = require('assert')\nconst {\n  crypto_sign_keypair: createKeypair,\n  crypto_sign_detached: sign,\n  crypto_generichash: hash,\n  crypto_sign_PUBLICKEYBYTES: pkSize,\n  crypto_sign_SECRETKEYBYTES: skSize,\n  crypto_sign_BYTES: signSize,\n  randombytes_buf: randomBytes\n} = require('sodium-native')\n\n// VALUE_MAX_SIZE + packet overhead (i.e. the key etc.)\n// should be less than the network MTU, normally 1400 bytes\nconst VALUE_MAX_SIZE = 1000\n\nconst saltSeg = Buffer.from('4:salt')\nconst seqSeg = Buffer.from('3:seqi')\nconst vSeg = Buffer.from('1:v')\n\nclass Hypersign {\n  salt (str = null, size = 32) {\n    if (typeof str === 'number') {\n      size = str\n      str = null\n    }\n    assert(\n      size >= 16 && size <= 64,\n      'salt size must be between 16 and 64 bytes (inclusive)'\n    )\n    const salt = Buffer.alloc(size)\n    if (typeof str === 'string') hash(salt, Buffer.from(str))\n    else randomBytes(salt)\n    return salt\n  }\n\n  keypair () {\n    const publicKey = Buffer.alloc(pkSize)\n    const secretKey = Buffer.alloc(skSize)\n    createKeypair(publicKey, secretKey)\n    return { publicKey, secretKey }\n  }\n\n  cryptoSign (msg, keypair) {\n    assert(Buffer.isBuffer(msg), 'msg must be a buffer')\n    assert(keypair, 'keypair is required')\n    const { secretKey } = keypair\n    assert(Buffer.isBuffer(secretKey), 'keypair.secretKey is required')\n    const signature = Buffer.alloc(signSize)\n    sign(signature, msg, secretKey)\n    return signature\n  }\n\n  sign (value, opts) {\n    assert(typeof opts === 'object', 'Options are required')\n    assert(Buffer.isBuffer(value), 'Value must be a buffer')\n    assert(value.length <= VALUE_MAX_SIZE, `Value size must be <= ${VALUE_MAX_SIZE}`)\n    const { keypair } = opts\n    assert(keypair, 'keypair is required')\n    const { secretKey } = keypair\n    assert(Buffer.isBuffer(secretKey), 'keypair.secretKey is required')\n    const msg = this.signable(value, opts)\n    const signature = Buffer.alloc(signSize)\n    sign(signature, msg, secretKey)\n    return signature\n  }\n\n  signable (value, opts = {}) {\n    const { salt, seq = 0 } = opts\n    assert(Buffer.isBuffer(value), 'Value must be a buffer')\n    assert(value.length <= VALUE_MAX_SIZE, `Value size must be <= ${VALUE_MAX_SIZE}`)\n    if (salt) {\n      assert(Buffer.isBuffer(salt), 'salt must be a buffer')\n      assert(\n        salt.length <= 64,\n        'salt size must be no greater than 64 bytes'\n      )\n    }\n\n    return salt ? Buffer.concat([\n      saltSeg,\n      Buffer.from(`${salt.length}:`),\n      salt,\n      seqSeg,\n      Buffer.from(`${seq.toString()}e`),\n      vSeg,\n      Buffer.from(`${value.length}:`),\n      value\n    ]) : Buffer.concat([\n      seqSeg,\n      Buffer.from(`${seq.toString()}e`),\n      vSeg,\n      Buffer.from(`${value.length}:`),\n      value\n    ])\n  }\n}\n\nmodule.exports = () => new Hypersign()\nmodule.exports.Hypersign = Hypersign\nmodule.exports.VALUE_MAX_SIZE = VALUE_MAX_SIZE\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/@hyperswarm/hypersign/index.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}}],"sources":{"../node_modules/@hyperswarm/hypersign/index.js":"'use strict'\nconst assert = require('assert')\nconst {\n  crypto_sign_keypair: createKeypair,\n  crypto_sign_detached: sign,\n  crypto_generichash: hash,\n  crypto_sign_PUBLICKEYBYTES: pkSize,\n  crypto_sign_SECRETKEYBYTES: skSize,\n  crypto_sign_BYTES: signSize,\n  randombytes_buf: randomBytes\n} = require('sodium-native')\n\n// VALUE_MAX_SIZE + packet overhead (i.e. the key etc.)\n// should be less than the network MTU, normally 1400 bytes\nconst VALUE_MAX_SIZE = 1000\n\nconst saltSeg = Buffer.from('4:salt')\nconst seqSeg = Buffer.from('3:seqi')\nconst vSeg = Buffer.from('1:v')\n\nclass Hypersign {\n  salt (str = null, size = 32) {\n    if (typeof str === 'number') {\n      size = str\n      str = null\n    }\n    assert(\n      size >= 16 && size <= 64,\n      'salt size must be between 16 and 64 bytes (inclusive)'\n    )\n    const salt = Buffer.alloc(size)\n    if (typeof str === 'string') hash(salt, Buffer.from(str))\n    else randomBytes(salt)\n    return salt\n  }\n\n  keypair () {\n    const publicKey = Buffer.alloc(pkSize)\n    const secretKey = Buffer.alloc(skSize)\n    createKeypair(publicKey, secretKey)\n    return { publicKey, secretKey }\n  }\n\n  cryptoSign (msg, keypair) {\n    assert(Buffer.isBuffer(msg), 'msg must be a buffer')\n    assert(keypair, 'keypair is required')\n    const { secretKey } = keypair\n    assert(Buffer.isBuffer(secretKey), 'keypair.secretKey is required')\n    const signature = Buffer.alloc(signSize)\n    sign(signature, msg, secretKey)\n    return signature\n  }\n\n  sign (value, opts) {\n    assert(typeof opts === 'object', 'Options are required')\n    assert(Buffer.isBuffer(value), 'Value must be a buffer')\n    assert(value.length <= VALUE_MAX_SIZE, `Value size must be <= ${VALUE_MAX_SIZE}`)\n    const { keypair } = opts\n    assert(keypair, 'keypair is required')\n    const { secretKey } = keypair\n    assert(Buffer.isBuffer(secretKey), 'keypair.secretKey is required')\n    const msg = this.signable(value, opts)\n    const signature = Buffer.alloc(signSize)\n    sign(signature, msg, secretKey)\n    return signature\n  }\n\n  signable (value, opts = {}) {\n    const { salt, seq = 0 } = opts\n    assert(Buffer.isBuffer(value), 'Value must be a buffer')\n    assert(value.length <= VALUE_MAX_SIZE, `Value size must be <= ${VALUE_MAX_SIZE}`)\n    if (salt) {\n      assert(Buffer.isBuffer(salt), 'salt must be a buffer')\n      assert(\n        salt.length <= 64,\n        'salt size must be no greater than 64 bytes'\n      )\n    }\n\n    return salt ? Buffer.concat([\n      saltSeg,\n      Buffer.from(`${salt.length}:`),\n      salt,\n      seqSeg,\n      Buffer.from(`${seq.toString()}e`),\n      vSeg,\n      Buffer.from(`${value.length}:`),\n      value\n    ]) : Buffer.concat([\n      seqSeg,\n      Buffer.from(`${seq.toString()}e`),\n      vSeg,\n      Buffer.from(`${value.length}:`),\n      value\n    ])\n  }\n}\n\nmodule.exports = () => new Hypersign()\nmodule.exports.Hypersign = Hypersign\nmodule.exports.VALUE_MAX_SIZE = VALUE_MAX_SIZE\n"},"lineCount":103}},"error":null,"hash":"c68c952e13f0b1172c4d040ef6f3d32c","cacheData":{"env":{}}}