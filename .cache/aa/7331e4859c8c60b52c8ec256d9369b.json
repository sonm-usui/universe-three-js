{"id":"../node_modules/bitfield-rle/index.js","dependencies":[{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/package.json","includedInParent":true,"mtime":1676236562742},{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/bitfield-rle/package.json","includedInParent":true,"mtime":1676236541301},{"name":"varint","loc":{"line":1,"column":21,"index":21},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/bitfield-rle/index.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/bitfield-rle/node_modules/varint/index.js"},{"name":"buffer-alloc-unsafe","loc":{"line":2,"column":20,"index":51},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/bitfield-rle/index.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/buffer-alloc-unsafe/index.js"}],"generated":{"js":"var varint = require('varint')\nvar alloc = require('buffer-alloc-unsafe')\n\nmodule.exports = align(1)\n\nfunction align (n) {\n  var exports = {}\n\n  exports.align = align\n\n  exports.encode = encode\n  exports.encode.bytes = 0\n  exports.encodingLength = encodingLength\n\n  exports.decode = decode\n  exports.decode.bytes = 0\n  exports.decodingLength = decodingLength\n\n  return exports\n\n  function State (input, output, offset) {\n    this.inputOffset = 0\n    this.inputLength = input.length\n    this.input = input\n    this.outputOffset = offset\n    this.output = output\n  }\n\n  function encode (bitfield, buffer, offset) {\n    if (!offset) offset = 0\n    if (!buffer) buffer = alloc(encodingLength(bitfield))\n    var state = new State(bitfield, buffer, offset)\n    rle(state)\n    encode.bytes = state.outputOffset - offset\n    return buffer\n  }\n\n  function encodingLength (bitfield) {\n    var state = new State(bitfield, null, 0)\n    rle(state)\n    return state.outputOffset\n  }\n\n  function decode (buffer, offset) {\n    if (!offset) offset = 0\n\n    var bitfield = alloc(decodingLength(buffer, offset))\n    var ptr = 0\n\n    while (offset < buffer.length) {\n      var next = varint.decode(buffer, offset)\n      var repeat = next & 1\n      var len = repeat ? (next - (next & 3)) / 4 : next / 2\n\n      offset += varint.decode.bytes\n\n      if (repeat) {\n        bitfield.fill(next & 2 ? 255 : 0, ptr, ptr + len)\n      } else {\n        buffer.copy(bitfield, ptr, offset, offset + len)\n        offset += len\n      }\n\n      ptr += len\n    }\n\n    bitfield.fill(0, ptr)\n    decode.bytes = buffer.length - offset\n\n    return bitfield\n  }\n\n  function decodingLength (buffer, offset) {\n    if (!offset) offset = 0\n\n    var len = 0\n\n    while (offset < buffer.length) {\n      var next = varint.decode(buffer, offset)\n      offset += varint.decode.bytes\n\n      var repeat = next & 1\n      var slice = repeat ? (next - (next & 3)) / 4 : next / 2\n\n      len += slice\n      if (!repeat) offset += slice\n    }\n\n    if (offset > buffer.length) throw new Error('Invalid RLE bitfield')\n\n    if (len & (n - 1)) return len + (n - (len & (n - 1)))\n\n    return len\n  }\n\n  function rle (state) {\n    var len = 0\n    var bits = 0\n    var input = state.input\n\n    while (state.inputLength > 0 && !input[state.inputLength - 1]) state.inputLength--\n\n    for (var i = 0; i < state.inputLength; i++) {\n      if (input[i] === bits) {\n        len++\n        continue\n      }\n\n      if (len) encodeUpdate(state, i, len, bits)\n\n      if (input[i] === 0 || input[i] === 255) {\n        bits = input[i]\n        len = 1\n      } else {\n        len = 0\n      }\n    }\n\n    if (len) encodeUpdate(state, state.inputLength, len, bits)\n    encodeFinal(state)\n  }\n\n  function encodeHead (state, end) {\n    var headLength = end - state.inputOffset\n    varint.encode(2 * headLength, state.output, state.outputOffset)\n    state.outputOffset += varint.encode.bytes\n    state.input.copy(state.output, state.outputOffset, state.inputOffset, end)\n    state.outputOffset += headLength\n  }\n\n  function encodeFinal (state) {\n    var headLength = state.inputLength - state.inputOffset\n    if (!headLength) return\n\n    if (!state.output) {\n      state.outputOffset += (headLength + varint.encodingLength(2 * headLength))\n    } else {\n      encodeHead(state, state.inputLength)\n    }\n\n    state.inputOffset = state.inputLength\n  }\n\n  function encodeUpdate (state, i, len, bit) {\n    var headLength = i - len - state.inputOffset\n    var headCost = (headLength ? varint.encodingLength(2 * headLength) + headLength : 0)\n    var enc = 4 * len + (bit ? 2 : 0) + 1 // len << 2 | bit << 1 | 1\n    var encCost = headCost + varint.encodingLength(enc)\n    var baseCost = varint.encodingLength(2 * (i - state.inputOffset)) + i - state.inputOffset\n\n    if (encCost >= baseCost) return\n\n    if (!state.output) {\n      state.outputOffset += encCost\n      state.inputOffset = i\n      return\n    }\n\n    if (headLength) encodeHead(state, i - len)\n\n    varint.encode(enc, state.output, state.outputOffset)\n    state.outputOffset += varint.encode.bytes\n    state.inputOffset = i\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/bitfield-rle/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/bitfield-rle/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}}],"sources":{"../node_modules/bitfield-rle/index.js":"var varint = require('varint')\nvar alloc = require('buffer-alloc-unsafe')\n\nmodule.exports = align(1)\n\nfunction align (n) {\n  var exports = {}\n\n  exports.align = align\n\n  exports.encode = encode\n  exports.encode.bytes = 0\n  exports.encodingLength = encodingLength\n\n  exports.decode = decode\n  exports.decode.bytes = 0\n  exports.decodingLength = decodingLength\n\n  return exports\n\n  function State (input, output, offset) {\n    this.inputOffset = 0\n    this.inputLength = input.length\n    this.input = input\n    this.outputOffset = offset\n    this.output = output\n  }\n\n  function encode (bitfield, buffer, offset) {\n    if (!offset) offset = 0\n    if (!buffer) buffer = alloc(encodingLength(bitfield))\n    var state = new State(bitfield, buffer, offset)\n    rle(state)\n    encode.bytes = state.outputOffset - offset\n    return buffer\n  }\n\n  function encodingLength (bitfield) {\n    var state = new State(bitfield, null, 0)\n    rle(state)\n    return state.outputOffset\n  }\n\n  function decode (buffer, offset) {\n    if (!offset) offset = 0\n\n    var bitfield = alloc(decodingLength(buffer, offset))\n    var ptr = 0\n\n    while (offset < buffer.length) {\n      var next = varint.decode(buffer, offset)\n      var repeat = next & 1\n      var len = repeat ? (next - (next & 3)) / 4 : next / 2\n\n      offset += varint.decode.bytes\n\n      if (repeat) {\n        bitfield.fill(next & 2 ? 255 : 0, ptr, ptr + len)\n      } else {\n        buffer.copy(bitfield, ptr, offset, offset + len)\n        offset += len\n      }\n\n      ptr += len\n    }\n\n    bitfield.fill(0, ptr)\n    decode.bytes = buffer.length - offset\n\n    return bitfield\n  }\n\n  function decodingLength (buffer, offset) {\n    if (!offset) offset = 0\n\n    var len = 0\n\n    while (offset < buffer.length) {\n      var next = varint.decode(buffer, offset)\n      offset += varint.decode.bytes\n\n      var repeat = next & 1\n      var slice = repeat ? (next - (next & 3)) / 4 : next / 2\n\n      len += slice\n      if (!repeat) offset += slice\n    }\n\n    if (offset > buffer.length) throw new Error('Invalid RLE bitfield')\n\n    if (len & (n - 1)) return len + (n - (len & (n - 1)))\n\n    return len\n  }\n\n  function rle (state) {\n    var len = 0\n    var bits = 0\n    var input = state.input\n\n    while (state.inputLength > 0 && !input[state.inputLength - 1]) state.inputLength--\n\n    for (var i = 0; i < state.inputLength; i++) {\n      if (input[i] === bits) {\n        len++\n        continue\n      }\n\n      if (len) encodeUpdate(state, i, len, bits)\n\n      if (input[i] === 0 || input[i] === 255) {\n        bits = input[i]\n        len = 1\n      } else {\n        len = 0\n      }\n    }\n\n    if (len) encodeUpdate(state, state.inputLength, len, bits)\n    encodeFinal(state)\n  }\n\n  function encodeHead (state, end) {\n    var headLength = end - state.inputOffset\n    varint.encode(2 * headLength, state.output, state.outputOffset)\n    state.outputOffset += varint.encode.bytes\n    state.input.copy(state.output, state.outputOffset, state.inputOffset, end)\n    state.outputOffset += headLength\n  }\n\n  function encodeFinal (state) {\n    var headLength = state.inputLength - state.inputOffset\n    if (!headLength) return\n\n    if (!state.output) {\n      state.outputOffset += (headLength + varint.encodingLength(2 * headLength))\n    } else {\n      encodeHead(state, state.inputLength)\n    }\n\n    state.inputOffset = state.inputLength\n  }\n\n  function encodeUpdate (state, i, len, bit) {\n    var headLength = i - len - state.inputOffset\n    var headCost = (headLength ? varint.encodingLength(2 * headLength) + headLength : 0)\n    var enc = 4 * len + (bit ? 2 : 0) + 1 // len << 2 | bit << 1 | 1\n    var encCost = headCost + varint.encodingLength(enc)\n    var baseCost = varint.encodingLength(2 * (i - state.inputOffset)) + i - state.inputOffset\n\n    if (encCost >= baseCost) return\n\n    if (!state.output) {\n      state.outputOffset += encCost\n      state.inputOffset = i\n      return\n    }\n\n    if (headLength) encodeHead(state, i - len)\n\n    varint.encode(enc, state.output, state.outputOffset)\n    state.outputOffset += varint.encode.bytes\n    state.inputOffset = i\n  }\n}\n"},"lineCount":166}},"error":null,"hash":"c77747e7d05de23634a4cb4086c5016e","cacheData":{"env":{}}}