{"id":"../node_modules/dat-node/lib/network.js","dependencies":[{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/package.json","includedInParent":true,"mtime":1676236562742},{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/dat-node/package.json","includedInParent":true,"mtime":1676236531349},{"name":"assert","loc":{"line":1,"column":21,"index":21},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/dat-node/lib/network.js","resolved":"/Users/sonamchoeda/.nvm/versions/node/v14.18.0/lib/node_modules/parcel-bundler/node_modules/assert/assert.js"},{"name":"pump","loc":{"line":2,"column":19,"index":50},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/dat-node/lib/network.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/pump/index.js"},{"name":"hyperswarm","loc":{"line":3,"column":25,"index":83},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/dat-node/lib/network.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/hyperswarm/swarm.js"},{"name":"debug","loc":{"line":4,"column":20,"index":117},"parent":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/dat-node/lib/network.js","resolved":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/debug/src/browser.js"}],"generated":{"js":"var assert = require('assert')\nvar pump = require('pump')\nvar hyperswarm = require('hyperswarm')\nvar debug = require('debug')('dat-node')\n\nmodule.exports = function (archive, opts, cb) {\n  assert.ok(archive, 'dat-node: lib/network archive required')\n  assert.ok(opts, 'dat-node: lib/network opts required')\n\n  var DEFAULT_PORT = 3282\n  var swarm = hyperswarm()\n  swarm.listen(DEFAULT_PORT)\n  swarm.once('error', function (err) {\n    if (err) debug('ERROR:', err.stack)\n    swarm.listen(0)\n  })\n  swarm.on('connection', function (socket, info) {\n    pump(socket, opts.stream(info), socket, function (err) {\n      if (err) return cb(err)\n    })\n  })\n  swarm.join(archive.discoveryKey, {\n    lookup: true,\n    announce: !(opts.upload === false)\n  }, cb)\n\n  return swarm\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/dat-node/lib/network.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/dat-node/lib/network.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}}],"sources":{"../node_modules/dat-node/lib/network.js":"var assert = require('assert')\nvar pump = require('pump')\nvar hyperswarm = require('hyperswarm')\nvar debug = require('debug')('dat-node')\n\nmodule.exports = function (archive, opts, cb) {\n  assert.ok(archive, 'dat-node: lib/network archive required')\n  assert.ok(opts, 'dat-node: lib/network opts required')\n\n  var DEFAULT_PORT = 3282\n  var swarm = hyperswarm()\n  swarm.listen(DEFAULT_PORT)\n  swarm.once('error', function (err) {\n    if (err) debug('ERROR:', err.stack)\n    swarm.listen(0)\n  })\n  swarm.on('connection', function (socket, info) {\n    pump(socket, opts.stream(info), socket, function (err) {\n      if (err) return cb(err)\n    })\n  })\n  swarm.join(archive.discoveryKey, {\n    lookup: true,\n    announce: !(opts.upload === false)\n  }, cb)\n\n  return swarm\n}\n"},"lineCount":29}},"error":null,"hash":"de5d713f63eeceb4dcf32d33c6cfb96a","cacheData":{"env":{}}}