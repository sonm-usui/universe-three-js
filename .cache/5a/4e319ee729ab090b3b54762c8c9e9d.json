{"id":"../node_modules/atomic-batcher/index.js","dependencies":[{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/package.json","includedInParent":true,"mtime":1676236562742},{"name":"/Users/sonamchoeda/Desktop/REACT-PROJECTS/three-js/node_modules/atomic-batcher/package.json","includedInParent":true,"mtime":1676236541632}],"generated":{"js":"module.exports = batcher\n\nfunction batcher (run) {\n  var running = false\n  var pendingBatch = null\n  var pendingCallbacks = null\n  var callbacks = null\n\n  return append\n\n  function done (err) {\n    if (callbacks) callAll(callbacks, err)\n\n    running = false\n    callbacks = pendingCallbacks\n    var nextBatch = pendingBatch\n\n    pendingBatch = null\n    pendingCallbacks = null\n\n    if (!nextBatch || !nextBatch.length) {\n      if (!callbacks || !callbacks.length) {\n        callbacks = null\n        return\n      }\n      if (!nextBatch) nextBatch = []\n    }\n\n    running = true\n    run(nextBatch, done)\n  }\n\n  function append (val, cb) {\n    if (running) {\n      if (!pendingBatch) {\n        pendingBatch = []\n        pendingCallbacks = []\n      }\n      pushAll(pendingBatch, val)\n      if (cb) pendingCallbacks.push(cb)\n    } else {\n      if (cb) callbacks = [cb]\n      running = true\n      run(Array.isArray(val) ? val : [val], done)\n    }\n  }\n}\n\nfunction pushAll (list, val) {\n  if (Array.isArray(val)) pushArray(list, val)\n  else list.push(val)\n}\n\nfunction pushArray (list, val) {\n  for (var i = 0; i < val.length; i++) list.push(val[i])\n}\n\nfunction callAll (list, err) {\n  for (var i = 0; i < list.length; i++) list[i](err)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/atomic-batcher/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/atomic-batcher/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}}],"sources":{"../node_modules/atomic-batcher/index.js":"module.exports = batcher\n\nfunction batcher (run) {\n  var running = false\n  var pendingBatch = null\n  var pendingCallbacks = null\n  var callbacks = null\n\n  return append\n\n  function done (err) {\n    if (callbacks) callAll(callbacks, err)\n\n    running = false\n    callbacks = pendingCallbacks\n    var nextBatch = pendingBatch\n\n    pendingBatch = null\n    pendingCallbacks = null\n\n    if (!nextBatch || !nextBatch.length) {\n      if (!callbacks || !callbacks.length) {\n        callbacks = null\n        return\n      }\n      if (!nextBatch) nextBatch = []\n    }\n\n    running = true\n    run(nextBatch, done)\n  }\n\n  function append (val, cb) {\n    if (running) {\n      if (!pendingBatch) {\n        pendingBatch = []\n        pendingCallbacks = []\n      }\n      pushAll(pendingBatch, val)\n      if (cb) pendingCallbacks.push(cb)\n    } else {\n      if (cb) callbacks = [cb]\n      running = true\n      run(Array.isArray(val) ? val : [val], done)\n    }\n  }\n}\n\nfunction pushAll (list, val) {\n  if (Array.isArray(val)) pushArray(list, val)\n  else list.push(val)\n}\n\nfunction pushArray (list, val) {\n  for (var i = 0; i < val.length; i++) list.push(val[i])\n}\n\nfunction callAll (list, err) {\n  for (var i = 0; i < list.length; i++) list[i](err)\n}\n"},"lineCount":61}},"error":null,"hash":"d567e5472fd1a521c4377f99b7685252","cacheData":{"env":{}}}